format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: flutter
workflows:
  downstream:
    description: |
      Prebuid the project with Git version of the plugin and runs tests.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html).
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - flutter-installer@0:
        inputs:
        - is_debug: "true"
    - cache-pull@2: {}
    - set-java-version@1:
        inputs:
        - set_java_version: '17'
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails

            brew install yq
        title: Install yq
    - script@1:
        title: Set git url, tag name for plugin in pubspec.yaml
        inputs:
        - content: |
            #!/usr/bin/env bash

            echo $FLUTTER_PLUGIN_GIT_REPO
            echo $BITRISE_GIT_TAG

            yq -i e '.dependencies.bluedot_point_sdk = null' pubspec.yaml
            REPO=$FLUTTER_PLUGIN_GIT_REPO yq -i e '.dependencies.bluedot_point_sdk.git.url = strenv(REPO)' pubspec.yaml
            TAG=$BITRISE_GIT_TAG yq -i e '.dependencies.bluedot_point_sdk.git.ref = strenv(TAG)' pubspec.yaml
    - script@1:
        title: run flutter pub get
        inputs:
        - content: |
            #!/usr/bin/env bash

            #first remove pubspec.lock file
            #rm -f pubspec.lock

            # do normal flutter pub get
            flutter pub get -v
    - script@1:
        title: Get plugin path
        inputs:
        - content: |-
            #!/usr/bin/env bash

            FULL_PATH=$(jq -r '.packages[] | select(.name == "bluedot_point_sdk").rootUri' $PACKAGE_JSON_FILE)
            TRIMMED_PATH=${FULL_PATH#"file://"}

            echo $FULL_PATH
            echo $TRIMMED_PATH

            envman add --key FLUTTER_PLUGIN_PATH --value "${TRIMMED_PATH}"
    - script@1:
        title: Set Plugin Release Notes File Path
        inputs:
        - content: |
            #!/usr/bin/env bash

            echo $FLUTTER_PLUGIN_PATH

            FLUTTER_PLUGIN_RELEASE_NOTES_FILE="${FLUTTER_PLUGIN_PATH}CHANGELOG.md"
            echo $FLUTTER_PLUGIN_RELEASE_NOTES_FILE
            envman add --key FLUTTER_PLUGIN_RELEASE_NOTES_FILE --value "${FLUTTER_PLUGIN_RELEASE_NOTES_FILE}"
    - script@1:
        title: Parse release notes
        inputs:
        - content: |-
            #!/usr/bin/env bash

            echo 'Use Plugin Release Notes'
            # insert a note saying this is a Downstream build
            sed $SEDOPTION "1s/^/\`Downstream build\` \n&/" "$FLUTTER_PLUGIN_RELEASE_NOTES_FILE"
            envman add --key RELEASE_NOTES --valuefile $FLUTTER_PLUGIN_RELEASE_NOTES_FILE

            echo $RELEASE_NOTES
    - script@1:
        title: Extract Plugin version
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # Downstream build
            FLUTTER_PLUGIN_VERSION=$(yq ".version" "$PUBSPEC_YAML_FILE")

            echo "Found package version: ${FLUTTER_PLUGIN_VERSION}"

            envman add --key FLUTTER_PLUGIN_VERSION --value "${FLUTTER_PLUGIN_VERSION}"
    - install-missing-android-tools@3:
        is_always_run: true
    - change-android-versioncode-and-versionname@1:
        is_always_run: true
        inputs:
        - new_version_name: $FLUTTER_PLUGIN_VERSION
        - build_gradle_path: $BITRISE_SOURCE_DIR/android/app/build.gradle
    - set-xcode-build-number@2:
        is_always_run: true
        inputs:
        - build_short_version_string: $FLUTTER_PLUGIN_VERSION
        - plist_path: $IOS_INFO_PLIST
    - flutter-build@0:
        is_always_run: true
        inputs:
        - cache_level: none
        - android_output_pattern: '*build/app/outputs/apk/*/*.apk'
    - sign-apk@1:
        inputs:
        - use_apk_signer: "true"
        - android_app: $BITRISE_APK_PATH
    - xcode-archive@5:
        is_always_run: true
        inputs:
        - automatic_code_signing: api-key
        - compile_bitcode: "no"
        - upload_bitcode: "no"
        - distribution_method: ad-hoc
    - cache-push@2: {}
    - deploy-to-bitrise-io@2:
        inputs:
        - is_enable_public_page: "false"
        - notify_user_groups: none
    - slack@4:
        inputs:
        - channel: ""
        - emoji: ':tada:'
        - from_username: Flutter Min App
        - footer: ""
        - webhook_url_on_error: $SLACK_WEBHOOK
        - channel_on_error: ""
        - text_on_error: ""
        - emoji_on_error: ':sob:'
        - from_username_on_error: Flutter Min App
        - text: ""
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
        - pretext: '*:tada: Flutter Min App Downstream Build Succeeded! :tada:*'
        - pretext_on_error: '*Oh no, Build Failed! :sob:*'
        - webhook_url: $SLACK_WEBHOOK
  min-app:
    description: |
      Builds project and runs tests.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html).
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - cache-pull@2: {}
    - set-java-version@1:
        inputs:
          - set_java_version: '17'
    - flutter-installer@0:
        inputs:
        - is_update: "false"
        - installation_bundle_url: https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_3.7.12-stable.zip
        - is_debug: "true"
    - script@1:
        title: Install yq
        inputs:
        - content: |-
            #!/usr/bin/env bash

            brew install yq
    - script@1:
        title: run flutter pub get
        inputs:
        - content: |
            #!/usr/bin/env bash

            #first remove pubspec.lock file
            #rm -f pubspec.lock

            # do normal flutter pub get
            flutter pub get -v
    - script@1:
        title: Parse release notes
        inputs:
        - content: |-
            #!/usr/bin/env bash

            echo 'Use Min App Release Notes'

            envman add --key RELEASE_NOTES --valuefile $APP_RELEASE_NOTES_FILE

            echo $RELEASE_NOTES
    - script@1:
        title: Extract Flutter Min App version
        inputs:
        - content: |-
            #!/usr/bin/env bash

            FLUTTER_VERSION=$(yq ".version" " $PUBSPEC_YAML_FILE")

            echo "Found version: ${FLUTTER_VERSION}"

            envman add --key FLUTTER_VERSION --value "${FLUTTER_VERSION}"
    - install-missing-android-tools@3:
        is_always_run: true
    - change-android-versioncode-and-versionname@1:
        is_always_run: true
        inputs:
        - new_version_name: $FLUTTER_VERSION
        - build_gradle_path: $BITRISE_SOURCE_DIR/android/app/build.gradle
    - set-xcode-build-number@2:
        is_always_run: true
        inputs:
        - build_short_version_string: $FLUTTER_VERSION
        - plist_path: $IOS_INFO_PLIST
    - flutter-build@0:
        is_always_run: true
        inputs:
        - cache_level: none
        - android_output_pattern: '*build/app/outputs/apk/*/*.apk'
    - sign-apk@1:
        inputs:
        - use_apk_signer: "true"
        - android_app: $BITRISE_APK_PATH
    - xcode-archive@5:
        title: Archive Build
        is_always_run: true
        inputs:
        - distribution_method: app-store
        - configuration: Release
        - artifact_name: ""
        - api_key_path: ""
        - automatic_code_signing: api-key
    - deploy-to-itunesconnect-deliver@2:
        is_always_run: true
        inputs:
        - connection: api_key
        - app_id: $APPSTORE_ID
        - distribute_external: "no"  # Internal testing only
        - groups: $APP_STORE_INTERNAL_TESTERS   
    - cache-push@2: {}
    - deploy-to-bitrise-io@2:
        inputs:
        - is_enable_public_page: "false"
        - notify_user_groups: none
    - slack@4:
        inputs:
        - channel: ""
        - emoji: ':tada:'
        - from_username: Flutter Min App
        - footer: ""
        - webhook_url_on_error: $SLACK_WEBHOOK
        - channel_on_error: ""
        - text_on_error: ""
        - emoji_on_error: ':sob:'
        - from_username_on_error: Flutter Min App
        - text: ""
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
        - pretext: '*:tada: Flutter Min App Build Succeeded! :tada:*'
        - pretext_on_error: '*Oh no, Build Failed! :sob:*'
        - webhook_url: $SLACK_WEBHOOK
meta:
  bitrise.io:
    stack: osx-xcode-16.4.x
    machine_type_id: g2-m1.4core
app:
  envs:
  - opts:
      is_expand: false
    BITRISE_FLUTTER_PROJECT_LOCATION: .
  - opts:
      is_expand: false
    FLUTTER_PLUGIN_GIT_REPO: git@github.com:Bluedot-Innovation/PointSDK-Flutter-Plugin.git
  - opts:
      is_expand: false
    GRADLEW_PATH: ./android/gradlew
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: ./ios/Runner.xcworkspace
  - opts:
      is_expand: false
    BITRISE_SCHEME: Runner
  - opts:
      is_expand: false
    IOS_INFO_PLIST: ./ios/Runner/Info.plist
  - opts:
      is_expand: false
    APP_RELEASE_NOTES_FILE: ./ReleaseNotes.md
  - opts:
      is_expand: false
    PUBSPEC_YAML_FILE: ./pubspec.yaml
  - opts:
      is_expand: false
    FLUTTER_PLUGIN_NAME: PointSDK-Flutter-Plugin
  - opts:
      is_expand: false
    PACKAGE_JSON_FILE: ./.dart_tool/package_config.json
  - APPSTORE_ID: "6751217428"
    opts:
      is_expand: false
  - APP_STORE_INTERNAL_TESTERS: Internal
    opts:
      is_expand: false
trigger_map:
- push_branch: release/*
  workflow: min-app
- tag: '*-pre+build*'
  workflow: downstream